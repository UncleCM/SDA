classDiagram
    %% Bridge Pattern Implementation for Shape Display System
    
    %% Abstraction Layer
    class Shape {
        <<abstract>>
        -OutputFormat outputFormat
        +Shape(OutputFormat)
        +setOutputFormat(OutputFormat)
        +draw()* void
    }
    
    %% Refined Abstractions
    class Circle {
        -int x, y, radius
        +Circle(int, int, int, OutputFormat)
        +draw() void
        +getX() int
        +setX(int)
        +getY() int
        +setY(int)
        +getRadius() int
        +setRadius(int)
    }
    
    class Rectangle {
        -int x1, y1, x2, y2
        +Rectangle(int, int, int, int, OutputFormat)
        +draw() void
        +getX1() int
        +setX1(int)
        +getY1() int
        +setY1(int)
        +getX2() int
        +setX2(int)
        +getY2() int
        +setY2(int)
    }
    
    class Polygon {
        -int[] xPoints
        -int[] yPoints
        -int numPoints
        +Polygon(int[], int[], OutputFormat)
        +draw() void
        +getXPoints() int[]
        +getYPoints() int[]
        +getNumPoints() int
    }
    
    %% Implementor Interface
    class OutputFormat {
        <<interface>>
        +drawLine(int, int, int, int) void
        +drawPixel(int, int) void
        +drawCircle(int, int, int) void
    }
    
    %% Concrete Implementors
    class Screen {
        +drawLine(int, int, int, int) void
        +drawPixel(int, int) void
        +drawCircle(int, int, int) void
    }
    
    class Printer {
        +drawLine(int, int, int, int) void
        +drawPixel(int, int) void
        +drawCircle(int, int, int) void
    }
    
    class XmlWriter {
        +drawLine(int, int, int, int) void
        +drawPixel(int, int) void
        +drawCircle(int, int, int) void
    }
    
    class ShapeDisplayTest {
        +main(String[]) void
    }
    
    %% Relationships
    Shape <|-- Circle
    Shape <|-- Rectangle
    Shape <|-- Polygon
    Shape o-- OutputFormat : bridge
    OutputFormat <|.. Screen
    OutputFormat <|.. Printer
    OutputFormat <|.. XmlWriter
    ShapeDisplayTest ..> Shape : uses
    ShapeDisplayTest ..> OutputFormat : uses
    
    %% Notes
    note for Shape "Abstraction: Maintains reference to implementor"
    note for OutputFormat "Implementor: Defines interface for implementation classes"
    note for Circle "Refined Abstraction: Extends abstraction interface"
    note for Screen "Concrete Implementor: Implements the implementor interface"
